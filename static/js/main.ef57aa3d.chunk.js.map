{"version":3,"sources":["components/Section.js","components/FeedbackOptions.js","components/Statistics.js","components/Notification.js","App.js","index.js"],"names":["Section","title","children","protoType","PropTypes","string","isRequired","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","state","props","initialValue","addFeedback","feedback","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","amount","Math","round","this","Object","keys","Component","defaultProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAGMA,EAAU,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MAAMC,EAAc,EAAdA,SACtB,OACK,qCACG,6BAAKD,IACJC,MAKXF,EAAQG,UAAY,CAChBF,MAAOG,IAAUC,OAAOC,YAIbN,QCUAO,EAvBS,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAC/B,OACF,mCACED,EAAQE,KAAI,SAACC,GAAD,OACZ,wBAEYC,KAAK,SACLC,KAAMF,EACNG,QAAS,WACpBL,EAAgBE,IALjB,SAOEA,GANeA,SCiBJI,EAvBE,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC7C,OACE,8BACE,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,cCAKC,EARM,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OAChB,4BAAIA,KCGHC,E,4MAMJC,MAAQ,CACNR,KAAM,EAAKS,MAAMC,aACjBT,QAAS,EAAKQ,MAAMC,aACpBR,IAAK,EAAKO,MAAMC,c,EAIlBC,YAAc,SAAAC,GACZ,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAAWE,EAAUF,GAAY,O,EAKxCG,mBAAqB,WACjB,MAA8B,EAAKP,MAGnC,OAHA,EAAOR,KAAP,EAAaC,QAAb,EAAsBC,K,EAOxBc,gCAAkC,WAChC,IAAIC,EAAS,EAAKF,qBACXf,EAAQ,EAAKQ,MAAbR,KAEP,OAAOkB,KAAKC,MAAe,IAAPnB,EAAciB,I,4CAKrC,WACC,MAA6BG,KAAKZ,MAA3BR,EAAP,EAAOA,KAAMC,EAAb,EAAaA,QAASC,EAAtB,EAAsBA,IAChBC,EAAQiB,KAAKL,qBACbX,EAAqBgB,KAAKJ,kCAChC,OACE,qCACE,cAAC,EAAD,CAAS/B,MAAM,wBAAf,SACE,cAAC,EAAD,CACEO,QAAS6B,OAAOC,KAAKF,KAAKZ,OAC1Bf,gBAAiB2B,KAAKT,gBAG1B,cAAC,EAAD,CAAS1B,MAAO,aAAhB,SAEc,IAAVkB,EACA,cAAC,EAAD,CAAcG,QAAQ,sBAEtB,cAAC,EAAD,CACEN,KAAQA,EACRC,QAAWA,EACXC,IAAOA,EACPC,MAASA,EACTC,mBAAsBA,a,GA3DhBmB,aAAZhB,EAEGiB,aAAe,CACpBd,aAAc,GAgEHH,QCpEfkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ef57aa3d.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\"\n\nconst Section = ({title,children}) => {\n  return(\n       <>\n          <h2>{title}</h2>\n          {children}\n       </> \n  ) \n}\n\nSection.protoType = {\n    title: PropTypes.string.isRequired,\n   \n}\n\nexport default Section;","import React from 'react';\nimport PropTypes from 'prop-types';\n//import shortid from 'shortid';\n\nconst FeedbackOptions = ({options, onLeaveFeedback }) => {\n    return (\n\t\t<>\n\t\t\t{options.map((option) => (\n\t\t\t\t<button\n                key={option} \n                type='button' \n                name={option} \n                onClick={() => {\n\t\t\t\t\tonLeaveFeedback(option);\n\t\t\t\t  }} >\n\t\t\t\t\t{option}\n\t\t\t\t</button>\n\t\t\t))}\n\t\t</>\n\t);\n}\n\nFeedbackOptions.propTypes = {\n    options: PropTypes.array.isRequired,\n    onLeaveFeedback: PropTypes.func.isRequired\n}\n\nexport default FeedbackOptions\n","import React from  \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n    return (\n      <div>\n        <ul >\n          <li>Good: {good}</li>\n          <li>Neutral: {neutral}</li>\n          <li>Bad: {bad}</li>\n          <li>Total: {total}</li>\n          <li>Positive feedback: {positivePercentage} %\n          </li>\n        </ul>\n      </div>\n    );\n  };\n  \n  Statistics.propTypes = {\n    good: PropTypes.number,\n    neutral: PropTypes.number,\n    bad: PropTypes.number,\n    total: PropTypes.number,\n    positivePercentage: PropTypes.number,\n  };\n  \n  export default Statistics;\n\n  ","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({message}) =>(\n     <p>{message}</p>\n); \n\nNotification.propTypes = {\n    message: PropTypes.string.isRequired\n}\n\nexport default Notification;","import React,{ Component } from 'react';\n\nimport Section from './components/Section';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Statistics from './components/Statistics';\nimport Notification from './components/Notification';\n\nclass App extends Component {\n\n  static defaultProps = {\n    initialValue: 0,\n  };\n\n  state = {\n    good: this.props.initialValue,\n    neutral: this.props.initialValue,\n    bad: this.props.initialValue,\n  };\n\n\n  addFeedback = feedback => {\n    this.setState(prevState => ({\n      [feedback]: prevState[feedback] + 1,\n    }));\n   // console.log(feedback)\n  };\n\ncountTotalFeedback = () => {\n    const {good, neutral, bad } = this.state;\n    const amountFeedback = good + neutral + bad;\n     //console.log(amountFeedback)\n    return amountFeedback;\n   \n  };\n\n  countPositiveFeedbackPercentage = () => {\n    let amount = this.countTotalFeedback();\n    const {good} = this.state;\n   // console.log (Math.round( (good * 100) / amount));\n    return Math.round( (good * 100) / amount);\n\n  };\n\n\n render() {\n  const {good, neutral, bad} = this.state;\n  const total = this.countTotalFeedback();\n  const positivePercentage = this.countPositiveFeedbackPercentage()\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={Object.keys(this.state)}\n          onLeaveFeedback={this.addFeedback}/>\n      </Section>\n\n      <Section title={'Statistics'}>\n        \n        { total === 0 ?(\n          <Notification message=\"No feedback given\" />\n        ) : (\n          <Statistics\n            good = {good}\n            neutral = {neutral}\n            bad = {bad}\n            total = {total}\n            positivePercentage = {positivePercentage}\n          />\n        )}\n      </Section>\n    </>\n  );\n}\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n//import 'modern-normalize/modern-normalize.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}